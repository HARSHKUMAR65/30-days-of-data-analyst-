# -*- coding: utf-8 -*-
"""Day 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZtoN4NbsVaZs3yuJ9y5ZozGZv4QSMW85

# Today we investigate the dataset containing information on population religion  areasize more of 226 countries  so i am focusing on factor that effect GDP per capita and try to make a model useing 227 countries from the dataset **bold text**
"""

#importing libraries 
import pandas as pd  #for data preprocesseing 
import numpy as np #for mathematical calculation 
import seaborn as sns # for vizualzation 
import matplotlib.pyplot as plt   #used for vizualization 
from sklearn.model_selection import train_test_split  #train test split 
from sklearn.preprocessing import LabelEncoder   # for label encodeing 
from sklearn.metrics import mean_squared_error , mean_squared_log_error  #cheaking the loss fuction

#Load the Data 
data=pd.read_csv("/content/Countries-GDP-Data.csv",decimal=',')

#vizulize the data 
data.head()

#Cheaking the missing value 
data.isnull().sum()

# cheaking data type of all columns 
data.info()

data.describe()

"""## Data preprocessing

I notice tha there is some missing value in this data so i just fill the misssing data useing the median of region that all countries belong to a countries that are closly geologically are often similar in many ways
"""

data.groupby('Region')[['GDP ($ per capita)','Literacy (%)','Agriculture']].median()

# Fill up missing values
for col in data.columns.values:
    if data[col].isnull().sum() == 0:
        continue
    if col == 'Climate':
        guess_values = data.groupby('Region')['Climate'].apply(lambda x: x.mode().max())
    else:
        guess_values = data.groupby('Region')[col].median()
    for region in data['Region'].unique():
        data[col].loc[(data[col].isnull())&(data['Region']==region)] = guess_values[region]

"""## Data Exploration

# Now we Find  10 Countries With  Highest GDP
"""

countries_with_highest_GDP=data.sort_values('GDP ($ per capita)',ascending=False)
countries_with_high_GDP=countries_with_highest_GDP[['GDP ($ per capita)','Country']].head(10)
plt.figure(figsize=(14,7))
sns.barplot(data=countries_with_high_GDP,x="Country",y="GDP ($ per capita)",palette='Set3')

"""# Now We Chek top factor that affecting GDP

Now we pick the six column which  are highly corelated  to  GDP and make scatter plot  so  first we cheak coorelation between all numerical columns with heatmap
"""

plt.figure(figsize=(16,16))
sns.heatmap(data.drop(columns=['Country','Region']).corr(),annot=True,cmap='crest')
plt.plot()

numeric_columns=data.drop(columns=['Country','Region'])
numeric_columns

fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(20,12))
plt.subplots_adjust(hspace=0.4)

corr_to_gdp = pd.Series()
for col in data.columns.values[2:]:
    if ((col!='GDP ($ per capita)')&(col!='Climate')):
        corr_to_gdp[col] = data['GDP ($ per capita)'].corr(data[col])
abs_corr_to_gdp = corr_to_gdp.abs().sort_values(ascending=False)
corr_to_gdp = corr_to_gdp.loc[abs_corr_to_gdp.index]

for i in range(2):
    for j in range(3):
        sns.regplot(x=corr_to_gdp.index.values[i*3+j], y='GDP ($ per capita)', data=data,
                   ax=axes[i,j], fit_reg=False, marker='.')
        title = 'correlation='+str(corr_to_gdp[i*3+j])
        axes[i,j].set_title(title)
axes[1,2].set_xlim(0,102)
plt.show()

"""# Modeling
training  and testing firstly i label encodeing all the feature  and i will use all the feature engenering  of data 
"""

le=LabelEncoder()
data['Region_label']=le.fit_transform(data['Region'])
data['climate_label']=le.fit_transform(data['Climate'])
data.head(2)

x=data.drop(columns=['Country','Region','GDP ($ per capita)'])
y=data['GDP ($ per capita)']

#splitb the data for train and test 
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
#cheaking shape 
x_train.shape,x_test.shape,y_train.shape,y_test.shape

# example of grid searching key hyperparameters for RandomForestClassifier
from sklearn.datasets import make_blobs
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
# define models and parameters
model = RandomForestRegressor()
n_estimators = [10, 100, 1000]
max_features = ['sqrt', 'log2']
# define grid search
grid = dict(n_estimators=n_estimators,max_features=max_features)
cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)
grid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)
grid_result = grid_search.fit(x_train, y_train)
# summarize results
print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_score']
stds = grid_result.cv_results_['std_test_score']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))

model = RandomForestRegressor(max_features='sqrt',n_estimators=10)

random_forest=model.fit(x_train,y_train)
model_pred=random_forest.predict(x_test)
modell_predd=random_forest

rmse_test = np.sqrt(mean_squared_error(model_pred, y_test))
msle_test = mean_squared_log_error(model_pred, y_test)

print('rmse_train:',rmse_test,'msle_train:',msle_test)

"""# Totoal GDP"""

data['Total GDP_capita']=data['GDP ($ per capita)']*data['Population']
top_gdp_countries=data.sort_values('Total GDP_capita',ascending=False).head(10)

other = pd.DataFrame({'Country':['Other'], 'Total GDP_capita':[data['Total GDP_c0.3apita'].sum() - top_gdp_countries['Total GDP_capita'].sum()]})
gdps = pd.concat([top_gdp_countries[['Country','Total GDP_capita']],other],ignore_index=True)

gdps

other

plt.figure(figsize=(14,7))
sns.barplot(x='Country',y='Total GDP_capita',data=gdps,palette='Set3')
plt.show()

plt.figure(figsize=(10,10))
plt.pie(gdps['Total GDP_capita'],labels=gdps['Country'],colors=sns.color_palette("Set3", gdps.shape[0]).as_hex(),autopct='%1.1f%%',shadow=True)

"""now let us cheak the  factor effecting gdp
so we cheak the correlation between total gdp and other colums
"""

corr_of_gdp=pd.Series()
for col in data.drop(columns=['Country','Region']):
  if ((col!='Total_GDP ($)')&(col!='Climate')&(col!='GDP ($ per capita)')):
        corr_to_gdp[col] = data['Total GDP_capita'].corr(data[col])
abs_corr_to_gdp=corr_to_gdp.abs().sort_values(ascending=False)
corr_to_gdp=corr_to_gdp.loc[abs_corr_to_gdp.index]
print(corr_to_gdp)

"""## Finally let us do comparision of economy structure of 10 countries  with highest GDP"""

plot_data=top_gdp_countries[['Country','Agriculture', 'Industry', 'Service']].set_index('Country')
plot_data.plot.bar(stacked=True,figsize=(14,7))
plt.show()

